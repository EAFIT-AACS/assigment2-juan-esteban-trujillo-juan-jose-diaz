def PDA(strings):
    """
    Simulates a Push Down Automaton (PDA) to recognize strings generated by the grammar G: 
    S → aSb | ε

    Parameters:
    strings (list): A list of strings to be tested.

    Returns:
    tuple: Two lists containing accepted and rejected strings.
    """

    acceptedStrings = []  # List to store accepted strings
    rejectedStrings = []  # List to store rejected strings

    for string in strings:
        stack = ["$"]  # Initialize stack with the bottom marker
        state = "q0"  # Start in the initial state

        # Process each character in the string
        for char in string:
            state, stack = transitions(state, stack, char)

        # A string is accepted if it ends in state q2 and the stack contains only "$"
        if state == "q2" and len(stack) == 1 and stack[0] == "$":
            acceptedStrings.append(string)
        else:
            rejectedStrings.append(string)

    # Print results
    for string in acceptedStrings:
        print(f"The string '{string}' is accepted by the PDA ✅")

    for string in rejectedStrings:
        print(f"The string '{string}' is rejected by the PDA ❌")

    return acceptedStrings, rejectedStrings


def transitions(state, stack, char):
    """
    Defines the transition rules for the PDA.

    Parameters:
    state (str): The current state of the PDA.
    stack (list): The current stack contents.
    char (str): The current input character.

    Returns:
    tuple: Updated state and stack after processing the input character.
    """

    if state == "q0":
        # Transition from q0 to q1 when reading 'a' and stack contains only '$'
        if char == "a" and stack[-1] == "$":
            stack.append("a")  # Push 'a' onto the stack
            state = "q1"
            return state, stack
        else:
            state = "q3"  # Move to rejection state
            return state, stack

    elif state == "q1":
        # Stay in q1 and push another 'a' when reading 'a'
        if char == "a" and stack[-1] == "a":
            stack.append("a")
            return "q1", stack

        # Move to q2 and pop 'a' when reading 'b'
        elif char == "b" and stack[-1] == "a":
            stack.pop()  # Remove 'a' from the stack
            return "q2", stack

        else:
            return "q3", stack  # Move to rejection state

    elif state == "q2":
        # Continue in q2 and pop 'a' when reading 'b'
        if char == "b" and stack[-1] == "a":
            stack.pop()
            return "q2", stack
        else:
            return "q3", stack  # Move to rejection state

    else:
        # If in rejection state q3, remain there
        return "q3", stack


def test():
    """
    Runs test cases for the PDA.
    """
    test_strings = ["", "ab", "aabb", "aaabbb", "abb", "aab"]
    PDA(test_strings)


# Run the test function
test()
